<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!--Detect platform-->
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('OSX'))">macos</PlatformEnv>
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux</PlatformEnv>
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</PlatformEnv>
    <!-- IsOsPlatform may not always be available on Windows -->
    <PlatformEnv Condition="'$(OS)' == 'Windows_NT'">win</PlatformEnv>
    <IsWindows Condition="'$(PlatformEnv)' == win">true</IsWindows>

    <!-- First priority is runtime identifier, if specified -->
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(RuntimeIdentifier)' != ''">$(RuntimeIdentifier)</OpenTapRuntime>
    <!-- This is a workaround when cross-compiling for mac arm64. 
    This is needed because the expected runtime identifier is osx, but we use macos in our payload directory. -->
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == 'osx-arm64'">macos-arm64</OpenTapRuntime>
    <!-- If no runtime is specified, check if PlatformTarget is defined
      A list of valid platform targets can be found here:
      https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/output#platformtarget
      -->
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(PlatformTarget).ToUpper()' == 'X64'">$(PlatformEnv)-x64</OpenTapRuntime>
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(PlatformTarget).ToUpper()' == 'X86'">$(PlatformEnv)-x86</OpenTapRuntime>
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(PlatformTarget).ToUpper()' == 'ARM'">$(PlatformEnv)-arm64</OpenTapRuntime>
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(PlatformTarget).ToUpper()' == 'ARM64'">$(PlatformEnv)-arm64</OpenTapRuntime>
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == '' AND '$(PlatformTarget).ToUpper()' == 'ANYCPU32BITPREFERRED'">$(PlatformEnv)-x86</OpenTapRuntime>
    <!-- If no PlatformTarget was recognized, fall back to the arcitecture of the machine -->
    <OpenTapRuntime Condition="'$(OpenTapRuntime)' == ''">$(PlatformEnv)-$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower())</OpenTapRuntime>
  </PropertyGroup>

  <PropertyGroup>
    <OpenTapAutogeneratedMsBuildReferenceFile>$(MSBuildProjectDirectory)/obj/$(MSBuildProjectName).opentap.g.props</OpenTapAutogeneratedMsBuildReferenceFile>
    <OpenTapRuntimeDir>$(MSBuildThisFileDirectory)runtimes\$(OpenTapRuntime)</OpenTapRuntimeDir>
  </PropertyGroup>

  <ImportGroup Condition="'$(ExcludeRestorePackageImports)' != 'true'">
    <Import Project="$(OpenTapAutogeneratedMsBuildReferenceFile)" Condition="Exists('$(OpenTapAutogeneratedMsBuildReferenceFile)')"/>
  </ImportGroup>

  <Target Name="VerifyRuntime" BeforeTargets="Build">
    <Error Condition="!Exists($(OpenTapRuntimeDir))"
           Text="$(OpenTapRuntime) builds are not supported."/>
  </Target>

  <!-- Runtime payload -->
  <ItemGroup Condition="Exists($(OpenTapRuntimeDir))">
    <PackagePayloadFiles Include="$(OpenTapRuntimeDir)\**\*"/>
  </ItemGroup>

  <Target Name="CopyOpenTapPayloadFiles"
          Condition="'$(CopyOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          Inputs="@(PackagePayloadFiles)"
          Outputs="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"
          BeforeTargets="Build;PostBuildEvent">
    <Copy SourceFiles="@(PackagePayloadFiles)"
          DestinationFiles="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="CleanOpenTapPayloadFiles"
          Condition="'$(CleanOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          BeforeTargets="Clean" 
          DependsOnTargets="ProcessOpenTapPackageList">
    <ItemGroup>
      <PackagePayloadFilesToClean Include="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
    </ItemGroup>
    <Delete Files="@(PackagePayloadFilesToClean);@(InstallMarkerFiles)"/>
  </Target>

  <Target Name="CreateOpenTapPackage"
          Condition="'$(CreateOpenTapPackage)' != 'false' And
                     '$(OutDir)' != '' And
                     Exists('$(OutDir)') And
                     '$(OpenTapPackageDefinitionPath)' != '' And
                     Exists('$(OpenTapPackageDefinitionPath)')"
          AfterTargets="Build">
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot;"
          Condition="'$(InstallCreatedOpenTapPackage)' != 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="$(IsWindows)"/>
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot; --install"
          Condition="'$(InstallCreatedOpenTapPackage)' == 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="$(IsWindows)"/>
  </Target>

  <Target Name="ProcessOpenTapPackageList">
    <ItemGroup>
      <OpenTapPackagesToInstall Include="@(AdditionalOpenTapPackage)">
        <Version>%(AdditionalOpenTapPackage.Version)</Version>
        <Repository>%(AdditionalOpenTapPackage.Repository)</Repository>
        <UnpackOnly>%(AdditionalOpenTapPackage.UnpackOnly)</UnpackOnly>
        <Token>%(AdditionalOpenTapPackage.Token)</Token>
      </OpenTapPackagesToInstall>
      <OpenTapPackagesToInstall Include="@(OpenTapPackageReference)">
        <Version>%(OpenTapPackageReference.Version)</Version>
        <Repository>%(OpenTapPackageReference.Repository)</Repository>
        <UnpackOnly>%(OpenTapPackageReference.UnpackOnly)</UnpackOnly>
        <Token>%(OpenTapPackageReference.Token)</Token>
      </OpenTapPackagesToInstall>
    </ItemGroup>

    <!-- Generate a list of all packages that should be referenced -->
    <ItemGroup>
      <OpenTapPackagesToReference Include="@(AdditionalOpenTapPackage->WithMetadataValue('Reference', 'true'))"/>
      <OpenTapPackagesToReference Include="@(OpenTapPackageReference)" Exclude="@(OpenTapPackageReference->WithMetadataValue('Reference', 'false'))"/>
    </ItemGroup>

    <!-- Generate a list of xml files for packages that should be referenced. 
      This will speed up incremental builds. 
    -->
    <ItemGroup>
      <ReferencedPackageXmlFiles Include="@(OpenTapPackagesToReference-> '$(OutDir)Packages/%(Identity)/package.xml')">
      </ReferencedPackageXmlFiles>
    </ItemGroup>

    <!-- Generate a list of marker files for all required packages and versions. 
      This is used to check if an image needs to be installed.
      This speeds up incremental builds a lot because it:
      1. Avoids network requests
      2. Avoids invalidating caches forcing OpenTapPackageReferences to be re-resolved and linked
    -->
    <ItemGroup>
      <InstallMarkerFiles Include="@(OpenTapPackagesToInstall-> '$(OutDir)Packages/%(Identity)/.v%(Version).marker')">
      </InstallMarkerFiles>
    </ItemGroup>
  </Target>


  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.InstallOpenTapPackages" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="InstallOpenTapPackages"
          Inputs="@(InstallMarkerFiles)"
          Outputs="@(InstallMarkerFiles)"
          DependsOnTargets="CopyOpenTapPayloadFiles;ProcessOpenTapPackageList"
          BeforeTargets="Build">
    <InstallOpenTapPackages
      TapDir="$(OutDir)"
      OpenTapRuntimeDir="$(OpenTapRuntimeDir)"
      PackagesToInstall="@(OpenTapPackagesToInstall)"
      Repositories="@(OpenTapPackageRepository)"
      SourceFile="$(MSBuildProjectFullPath)"
      PlatformTarget="$(PlatformTarget)"/>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.AddAssemblyReferencesFromPackage" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="GenerateOpenTapReferenceProps"
          Inputs="$(MSBuildProjectFullPath);@(ReferencedPackageXmlFiles)"
          Outputs="$(OpenTapAutogeneratedMsBuildReferenceFile)"
          DependsOnTargets="ProcessOpenTapPackageList;InstallOpenTapPackages" BeforeTargets="ResolveReferences;CoreCompile;ResolveAssemblyReferences">
    <AddAssemblyReferencesFromPackage PackageInstallDir="$(OutDir)"
                                      SourceFile="$(MSBuildProjectFullPath)"
                                      OpenTapPackagesToReference="@(OpenTapPackagesToReference)"
                                      TargetMsBuildFile="$(OpenTapAutogeneratedMsBuildReferenceFile)">
      <Output TaskParameter="Assemblies" ItemName="_OpenTapPackagesReferences"/>
    </AddAssemblyReferencesFromPackage>
    <Touch Files="$(MSBuildThisFileFullPath)"/>
    <ItemGroup>
      <Reference Include="@(_OpenTapPackagesReferences-> '$(OutDir)%(Identity)')"/>
    </ItemGroup>
  </Target>

  <Target Name="OpenTapCheckVersioningVariables" BeforeTargets="Build">
    <Error 
    Condition="'$(OpenTapSetAssemblyVersion)' != '' AND '$(OpenTapSetAssemblyVersion)' != 'false' AND '$(GenerateAssemblyInfo)' != 'true'"
           Text="OpenTapSetAssemblyVersion was specified, but GenerateAssemblyInfo is false. Please set GenerateAssemblyInfo to true."/>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.CalculateVersion" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target 
    Condition="'$(OpenTapSetAssemblyVersion)' != '' AND '$(OpenTapSetAssemblyVersion)' != 'false'"
    Name="OpenTapCalculateAssemblyVersion"
    AfterTargets="OpenTapCheckVersioningVariables"
    BeforeTargets="GetAssemblyAttributes">
    <CalculateVersion 
      TapDir="$(OutDir)"
      InputVersion="$(OpenTapSetAssemblyVersion)"
      SourceFile="$(MSBuildProjectFullPath)"
      >
      <Output TaskParameter="OutputShortVersion" ItemName="_OpenTapPluginVersion"/>
      <Output TaskParameter="OutputLongVersion" ItemName="_OpenTapPluginInformationalVersion"/>
    </CalculateVersion>
    <PropertyGroup>
      <Version>@(_OpenTapPluginVersion)</Version>
      <AssemblyVersion>@(_OpenTapPluginVersion)</AssemblyVersion>
      <FileVersion>@(_OpenTapPluginVersion).0</FileVersion>
      <InformationalVersion>@(_OpenTapPluginInformationalVersion)</InformationalVersion>
    </PropertyGroup>
  </Target>

</Project>
